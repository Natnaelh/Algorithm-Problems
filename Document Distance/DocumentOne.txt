This chapter    will familiarize you with the framework we shall use throughout the
book to think about the design and analysis of algorithms. It is self-contained, but
it does include several references to material that we introduce in Chapters 3 and 4.
(It also contains several summations, which Appendix A shows how to solve.)
We begin by examining the insertion sort algorithm to solve the sorting problem
introduced in Chapter 1. We define a “pseudocode” that should be familiar to you if
you have done computer programming, and we use it to show how we shall specify
our algorithms. Having specified the insertion sort algorithm, we then argue that it
correctly sorts, and we analyze its running time. The analysis introduces a notation
that focuses on how that time increases with the number of items to be sorted.
Following our discussion of insertion sort, we introduce the divide-and-conquer
approach to the design of algorithms and use it to develop an algorithm called
merge sort. We end with an analysis of merge sort’s running time.
6.042/18.062J Mathematics for Computer Science
Tom Leighton and Marten van Dijk
September 9, 2010
Problem Set 1
Problem 1. [24 points]
Translate the following sentences from English to predicate logic. The domain that you are
working over is X, the set of people. You may use the functions S(x), meaning that “x has
been a student of 6.042,” A(x), meaning that “x has gotten an ‘A’ in 6.042,” T (x), meaning
that “x is a TA of 6.042,” and E(x, y), meaning that “x and y are the same person.”
(a) [6 pts] There are people who have taken 6.042 and have gotten A’s in 6.042
(b) [6 pts] All people who are 6.042 TA’s and have taken 6.042 got A’s in 6.042
(c) [6 pts] There are no people who are 6.042 TA’s who did not get A’s in 6.042.
(d) [6 pts] There are at least three people who are TA’s in 6.042 and have not taken 6.042
Problem 2. [24 points]
Use a truth table to prove or disprove the following statements:
(a)	 [12 pts]

¬(P ∨ (Q ∧ R)) = (¬P ) ∧ (¬Q ∨ ¬R)

(b)	 [12 pts]

¬(P ∧ (Q ∨ R)) = ¬P ∨ (¬Q ∨ ¬R)

Problem 3. [24 points]
The binary logical connectives ∧ (and ), ∨ (or ), and ⇒ (implies) appear often in not only
computer programs, but also everyday speech. In computer chip designs, however, it is
considerably easier to construct these out of another operation, nand, which is simpler to
represent in a circuit. Here is the truth table for nand:
P
Q
 P nand Q

true true
false
true false
true
false true
true
false false
true2
Problem Set 1
(a) [12 pts] For each of the following expressions, find an equivalent expression using only
nand and ¬ (not), as well as grouping parentheses to specify the order in which the operations
apply. You may use A, B, and the operators any number of times.
(i) A ∧ B
(ii) A ∨ B
(iii) A ⇒ B
(b) [4 pts] It is actually possible to express each of the above using only nand, without
needing to use ¬. Find an equivalent expression for ( ¬ A) using only nand and grouping
parentheses.
(c) [8 pts] The constants true and false themselves may be expressed using only nand.
Construct an expression using an arbitrary statement A and nand that evaluates to true re­
gardless of whether A is true or false. Construct a second expression that always evaluates
to false. Do not use the constants true and false themselves in your statements.
Problem 4. [10 points] You have 12 coins and a balance scale, one of which is fake. All
the real coins weigh the same, but the fake coin weighs less than the rest. All the coins
visually appear the same, and the difference in weight is imperceptible to your senses. In at
most 3 weighings, give a strategy that detects the fake coin. (Note: the scale in this problem
is a scale with two dishes, which tips toward the side that is heavier. For clarification, do an
image search for “balance scale”).

Problem 1. [20 points] You are organizing a neighborhood census and instruct your census
takers to knock on doors and note the sex of any child that answers the knock. Assume that
there are two children in a household and that girls and boys are equally likely to be children
and to open the door.
A sample space for this experiment has outcomes that are triples whose first element is either
B or G for the sex of the elder child, likewise for the second element and the sex of the younger
child, and whose third coordinate is E or Y indicating whether the elder child or younger
child opened the door. For example, (B, G, Y) is the outcome that the elder child is a boy,
the younger child is a girl, and the girl opened the door.
(a) [5 pts] Let T be the event that the household has two girls, and O be the event that a
girl opened the door. List the outcomes in T and O.
(b) [5 pts] What is the probability Pr (T | O), that both children are girls, given that a girl
opened the door?
(c) [10 pts] Where is the mistake in the following argument for computing Pr (T | O)?
If a girl opens the door, then we know that there is at least one girl in the household.
The probability that there is at least one girl is



This chapter    will familiarize you with the framework we shall use throughout the
book to think about the design and analysis of algorithms. It is self-contained, but
it does include several references to material that we introduce in Chapters 3 and 4.
(It also contains several summations, which Appendix A shows how to solve.)
We begin by examining the insertion sort algorithm to solve the sorting problem
introduced in Chapter 1. We define a “pseudocode” that should be familiar to you if
you have done computer programming, and we use it to show how we shall specify
our algorithms. Having specified the insertion sort algorithm, we then argue that it
correctly sorts, and we analyze its running time. The analysis introduces a notation
that focuses on how that time increases with the number of items to be sorted.
Following our discussion of insertion sort, we introduce the divide-and-conquer
approach to the design of algorithms and use it to develop an algorithm called
merge sort. We end with an analysis of merge sort’s running time.
6.042/18.062J Mathematics for Computer Science
Tom Leighton and Marten van Dijk
September 9, 2010
Problem Set 1
Problem 1. [24 points]
Translate the following sentences from English to predicate logic. The domain that you are
working over is X, the set of people. You may use the functions S(x), meaning that “x has
been a student of 6.042,” A(x), meaning that “x has gotten an ‘A’ in 6.042,” T (x), meaning
that “x is a TA of 6.042,” and E(x, y), meaning that “x and y are the same person.”
(a) [6 pts] There are people who have taken 6.042 and have gotten A’s in 6.042
(b) [6 pts] All people who are 6.042 TA’s and have taken 6.042 got A’s in 6.042
(c) [6 pts] There are no people who are 6.042 TA’s who did not get A’s in 6.042.
(d) [6 pts] There are at least three people who are TA’s in 6.042 and have not taken 6.042
Problem 2. [24 points]
Use a truth table to prove or disprove the following statements:
(a)	 [12 pts]

¬(P ∨ (Q ∧ R)) = (¬P ) ∧ (¬Q ∨ ¬R)

(b)	 [12 pts]

¬(P ∧ (Q ∨ R)) = ¬P ∨ (¬Q ∨ ¬R)

Problem 3. [24 points]
The binary logical connectives ∧ (and ), ∨ (or ), and ⇒ (implies) appear often in not only
computer programs, but also everyday speech. In computer chip designs, however, it is
considerably easier to construct these out of another operation, nand, which is simpler to
represent in a circuit. Here is the truth table for nand:
P
Q
 P nand Q

true true
false
true false
true
false true
true
false false
true2
Problem Set 1
(a) [12 pts] For each of the following expressions, find an equivalent expression using only
nand and ¬ (not), as well as grouping parentheses to specify the order in which the operations
apply. You may use A, B, and the operators any number of times.
(i) A ∧ B
(ii) A ∨ B
(iii) A ⇒ B
(b) [4 pts] It is actually possible to express each of the above using only nand, without
needing to use ¬. Find an equivalent expression for ( ¬ A) using only nand and grouping
parentheses.
(c) [8 pts] The constants true and false themselves may be expressed using only nand.
Construct an expression using an arbitrary statement A and nand that evaluates to true re­
gardless of whether A is true or false. Construct a second expression that always evaluates
to false. Do not use the constants true and false themselves in your statements.
Problem 4. [10 points] You have 12 coins and a balance scale, one of which is fake. All
the real coins weigh the same, but the fake coin weighs less than the rest. All the coins
visually appear the same, and the difference in weight is imperceptible to your senses. In at
most 3 weighings, give a strategy that detects the fake coin. (Note: the scale in this problem
is a scale with two dishes, which tips toward the side that is heavier. For clarification, do an
image search for “balance scale”).

Problem 1. [20 points] You are organizing a neighborhood census and instruct your census
takers to knock on doors and note the sex of any child that answers the knock. Assume that
there are two children in a household and that girls and boys are equally likely to be children
and to open the door.
A sample space for this experiment has outcomes that are triples whose first element is either
B or G for the sex of the elder child, likewise for the second element and the sex of the younger
child, and whose third coordinate is E or Y indicating whether the elder child or younger
child opened the door. For example, (B, G, Y) is the outcome that the elder child is a boy,
the younger child is a girl, and the girl opened the door.
(a) [5 pts] Let T be the event that the household has two girls, and O be the event that a
girl opened the door. List the outcomes in T and O.
(b) [5 pts] What is the probability Pr (T | O), that both children are girls, given that a girl
opened the door?
(c) [10 pts] Where is the mistake in the following argument for computing Pr (T | O)?
If a girl opens the door, then we know that there is at least one girl in the household.
The probability that there is at least one girl is




This chapter    will familiarize you with the framework we shall use throughout the
book to think about the design and analysis of algorithms. It is self-contained, but
it does include several references to material that we introduce in Chapters 3 and 4.
(It also contains several summations, which Appendix A shows how to solve.)
We begin by examining the insertion sort algorithm to solve the sorting problem
introduced in Chapter 1. We define a “pseudocode” that should be familiar to you if
you have done computer programming, and we use it to show how we shall specify
our algorithms. Having specified the insertion sort algorithm, we then argue that it
correctly sorts, and we analyze its running time. The analysis introduces a notation
that focuses on how that time increases with the number of items to be sorted.
Following our discussion of insertion sort, we introduce the divide-and-conquer
approach to the design of algorithms and use it to develop an algorithm called
merge sort. We end with an analysis of merge sort’s running time.
6.042/18.062J Mathematics for Computer Science
Tom Leighton and Marten van Dijk
September 9, 2010
Problem Set 1
Problem 1. [24 points]
Translate the following sentences from English to predicate logic. The domain that you are
working over is X, the set of people. You may use the functions S(x), meaning that “x has
been a student of 6.042,” A(x), meaning that “x has gotten an ‘A’ in 6.042,” T (x), meaning
that “x is a TA of 6.042,” and E(x, y), meaning that “x and y are the same person.”
(a) [6 pts] There are people who have taken 6.042 and have gotten A’s in 6.042
(b) [6 pts] All people who are 6.042 TA’s and have taken 6.042 got A’s in 6.042
(c) [6 pts] There are no people who are 6.042 TA’s who did not get A’s in 6.042.
(d) [6 pts] There are at least three people who are TA’s in 6.042 and have not taken 6.042
Problem 2. [24 points]
Use a truth table to prove or disprove the following statements:
(a)	 [12 pts]

¬(P ∨ (Q ∧ R)) = (¬P ) ∧ (¬Q ∨ ¬R)

(b)	 [12 pts]

¬(P ∧ (Q ∨ R)) = ¬P ∨ (¬Q ∨ ¬R)

Problem 3. [24 points]
The binary logical connectives ∧ (and ), ∨ (or ), and ⇒ (implies) appear often in not only
computer programs, but also everyday speech. In computer chip designs, however, it is
considerably easier to construct these out of another operation, nand, which is simpler to
represent in a circuit. Here is the truth table for nand:
P
Q
 P nand Q

true true
false
true false
true
false true
true
false false
true2
Problem Set 1
(a) [12 pts] For each of the following expressions, find an equivalent expression using only
nand and ¬ (not), as well as grouping parentheses to specify the order in which the operations
apply. You may use A, B, and the operators any number of times.
(i) A ∧ B
(ii) A ∨ B
(iii) A ⇒ B
(b) [4 pts] It is actually possible to express each of the above using only nand, without
needing to use ¬. Find an equivalent expression for ( ¬ A) using only nand and grouping
parentheses.
(c) [8 pts] The constants true and false themselves may be expressed using only nand.
Construct an expression using an arbitrary statement A and nand that evaluates to true re­
gardless of whether A is true or false. Construct a second expression that always evaluates
to false. Do not use the constants true and false themselves in your statements.
Problem 4. [10 points] You have 12 coins and a balance scale, one of which is fake. All
the real coins weigh the same, but the fake coin weighs less than the rest. All the coins
visually appear the same, and the difference in weight is imperceptible to your senses. In at
most 3 weighings, give a strategy that detects the fake coin. (Note: the scale in this problem
is a scale with two dishes, which tips toward the side that is heavier. For clarification, do an
image search for “balance scale”).

Problem 1. [20 points] You are organizing a neighborhood census and instruct your census
takers to knock on doors and note the sex of any child that answers the knock. Assume that
there are two children in a household and that girls and boys are equally likely to be children
and to open the door.
A sample space for this experiment has outcomes that are triples whose first element is either
B or G for the sex of the elder child, likewise for the second element and the sex of the younger
child, and whose third coordinate is E or Y indicating whether the elder child or younger
child opened the door. For example, (B, G, Y) is the outcome that the elder child is a boy,
the younger child is a girl, and the girl opened the door.
(a) [5 pts] Let T be the event that the household has two girls, and O be the event that a
girl opened the door. List the outcomes in T and O.
(b) [5 pts] What is the probability Pr (T | O), that both children are girls, given that a girl
opened the door?
(c) [10 pts] Where is the mistake in the following argument for computing Pr (T | O)?
If a girl opens the door, then we know that there is at least one girl in the household.
The probability that there is at least one girl is
